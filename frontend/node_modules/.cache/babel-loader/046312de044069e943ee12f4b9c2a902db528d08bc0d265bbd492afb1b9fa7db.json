{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jarde\\\\todo list\\\\frontend\\\\src\\\\components\\\\Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(\"\");\n  const fetchWeather = async () => {\n    const city = \"São Paulo\"; // Você pode modificar para receber a cidade dinamicamente\n    const apiKey = \"sua-chave-de-api\"; // Substitua pela sua chave da API do OpenWeatherMap\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (response.ok) {\n        setWeather(data);\n      } else {\n        setError(\"Erro ao carregar o clima.\");\n      }\n    } catch (err) {\n      setError(\"Erro ao conectar ao servidor.\");\n    }\n  };\n  useEffect(() => {\n    fetchWeather();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Clima em \", weather.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperatura: \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"rncVM2c+8V4wmqBX0HN5D7pSHYo=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Weather","_s","weather","setWeather","error","setError","fetchWeather","city","apiKey","url","response","fetch","data","json","ok","err","children","fileName","_jsxFileName","lineNumber","columnNumber","name","description","main","temp","_c","$RefreshReg$"],"sources":["C:/Users/jarde/todo list/frontend/src/components/Weather.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Weather = () => {\n  const [weather, setWeather] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  const fetchWeather = async () => {\n    const city = \"São Paulo\"; // Você pode modificar para receber a cidade dinamicamente\n    const apiKey = \"sua-chave-de-api\"; // Substitua pela sua chave da API do OpenWeatherMap\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (response.ok) {\n        setWeather(data);\n      } else {\n        setError(\"Erro ao carregar o clima.\");\n      }\n    } catch (err) {\n      setError(\"Erro ao conectar ao servidor.\");\n    }\n  };\n\n  useEffect(() => {\n    fetchWeather();\n  }, []);\n\n  return (\n    <div>\n      {error && <p>{error}</p>}\n      {weather && (\n        <div>\n          <h3>Clima em {weather.name}</h3>\n          <p>{weather.weather[0].description}</p>\n          <p>Temperatura: {weather.main.temp}°C</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,IAAI,GAAG,WAAW,CAAC,CAAC;IAC1B,MAAMC,MAAM,GAAG,kBAAkB,CAAC,CAAC;IACnC,MAAMC,GAAG,GAAG,oDAAoDF,IAAI,UAAUC,MAAM,eAAe;IAEnG,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfX,UAAU,CAACS,IAAI,CAAC;MAClB,CAAC,MAAM;QACLP,QAAQ,CAAC,2BAA2B,CAAC;MACvC;IACF,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZV,QAAQ,CAAC,+BAA+B,CAAC;IAC3C;EACF,CAAC;EAEDR,SAAS,CAAC,MAAM;IACdS,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAAiB,QAAA,GACGZ,KAAK,iBAAIL,OAAA;MAAAiB,QAAA,EAAIZ;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBlB,OAAO,iBACNH,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAAiB,QAAA,GAAI,WAAS,EAACd,OAAO,CAACmB,IAAI;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChCrB,OAAA;QAAAiB,QAAA,EAAId,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC,CAACoB;MAAW;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvCrB,OAAA;QAAAiB,QAAA,GAAG,eAAa,EAACd,OAAO,CAACqB,IAAI,CAACC,IAAI,EAAC,OAAE;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CAtCID,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAwCb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}